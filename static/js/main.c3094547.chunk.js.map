{"version":3,"sources":["components/Card.js","components/CardList.js","components/SearchBox.js","components/scroll.js","containers/Appp.js","action.js","constant.js","serviceWorker.js","reducers.js","index.js"],"names":["Card","_ref","name","email","id","react_default","a","createElement","className","alt","src","concat","CardList","robots","map","user","i","components_Card","key","SearchBox","searchField","searchChange","type","placeholder","onChange","Scroll","props","style","overflow","border","height","children","Appp","this","onRequestRobots","_this$props","onSearchChange","isPending","filteredRobots","filter","robot","toLowerCase","includes","components_SearchBox","components_scroll","components_CardList","Component","connect","state","console","log","searchRobots","requestRobots","error","dispatch","event","payload","target","value","fetch","then","response","json","data","catch","Boolean","window","location","hostname","match","initialStateSearch","initialStateRobots","logger","createLogger","rootReducer","combineReducers","arguments","length","undefined","action","Object","assign","store","createStore","applyMiddleware","thunkMiddleware","ReactDOM","render","es","containers_Appp","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.c3094547.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nconst Card = ({name, email, id}) => {\r\n    return (\r\n        <div className='tc bg-light-green dib br3 pa3 ma2 grow bw2 shadow-5'>\r\n            <img alt='robots' src={`https://robohash.org/${id}?200x200`} />\r\n        <div>\r\n            <h2>{name}</h2>\r\n            <p>{email}</p>\r\n\r\n        </div>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Card;","import React from 'react';\r\n\r\nimport Card from './Card';\r\n\r\nconst CardList = ({ robots }) => {\r\n    return(\r\n        <div>    \r\n          {\r\n           robots.map ((user, i) => {\r\n               return (<Card \r\n               key={i} \r\n               id={robots[i].id}\r\n               name={robots[i].name} \r\n               email={robots[i].email}\r\n            />);\r\n      })\r\n           }\r\n        </div>\r\n\r\n    );\r\n}\r\n\r\nexport default CardList;","import React from 'react'\r\n\r\nconst SearchBox= ({searchField, searchChange}) => {\r\n    return (\r\n        <div className='pa2'>\r\n    <input \r\n        className='pa3 ba b--green bg-lightest-blue'\r\n        type='search'\r\n        placeholder='search robots'\r\n        onChange={searchChange}\r\n        />\r\n     </div>\r\n    )\r\n    \r\n}\r\n\r\nexport default SearchBox;","import React from 'react'\r\n\r\nconst Scroll = (props) => {\r\n    return (\r\n        <div style= {{ overflow:'scroll', border: '5px solid black', height: '800px'}}>\r\n         {props.children}\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default Scroll;","import React, { Component } from 'react';\r\nimport { connect } from 'react-redux'\r\nimport CardList from '../components/CardList';\r\nimport SearchBox from '../components/SearchBox';\r\nimport Scroll from '../components/scroll';\r\nimport '../containers/App.css'\r\n\r\nimport { setSearchField, requestRobots } from '../action'\r\n\r\nconst mapStateToProps = state => {\r\n    console.log (state)\r\n    return {\r\n           searchField: state.searchRobots.searchField,\r\n           robots: state.requestRobots.robots,\r\n           isPending: state.requestRobots.isPending,\r\n           error: state.requestRobots.error\r\n    }\r\n}\r\n\r\nconst mapDispatchToProps = (dispatch) => {\r\n   return {\r\n        onSearchChange: (event) => dispatch(setSearchField(event.target.value)),\r\n        onRequestRobots: () => dispatch(requestRobots())\r\n     }\r\n} \r\nclass Appp extends Component {\r\n    componentDidMount(){\r\n        this.props.onRequestRobots();   \r\n}\r\n\r\n    render() {\r\n        const { searchField, onSearchChange, robots, isPending } = this.props;\r\n        const filteredRobots =robots.filter (robot => {\r\n            return robot.name.toLowerCase().includes(searchField.toLowerCase());\r\n        })\r\n        return isPending ?\r\n     <h1>LOADING...</h1>:\r\n           (\r\n            <div className='tc'>\r\n                <h1>ROBOFRIENDS</h1>\r\n                <SearchBox searchChange={onSearchChange} />\r\n                <Scroll>\r\n                <CardList robots={filteredRobots} />\r\n                </Scroll>\r\n            </div>\r\n        );\r\n    }\r\n    }\r\n\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(Appp);\r\n","import { \r\n    CHANGE_SEARCH_FIELD,\r\n    REQUEST_ROBOTS_PENDING,\r\n    REQUEST_ROBOTS_SUCCESS,\r\n    REQUEST_ROBOTS_FAILED,\r\n } from './constant.js'\r\n\r\nexport const setSearchField = (text) => ({\r\n    type: CHANGE_SEARCH_FIELD,\r\n    payload: text \r\n})\r\n\r\nexport const requestRobots = () => (dispatch) => {\r\n    dispatch({type: REQUEST_ROBOTS_PENDING});\r\n    fetch('https://jsonplaceholder.typicode.com/users')\r\n    .then(response => response.json())\r\n    .then(data => dispatch({type: REQUEST_ROBOTS_SUCCESS, payload: data}))\r\n    .catch(error => dispatch({type: REQUEST_ROBOTS_FAILED, payload: error})\r\n    )\r\n}\r\n","export const CHANGE_SEARCH_FIELD ='CHANGE_SEARCH_FIELD'\r\n\r\n\r\nexport const  REQUEST_ROBOTS_PENDING = ' REQUEST_ROBOTS_PENDING ';\r\nexport const  REQUEST_ROBOTS_SUCCESS = ' REQUEST_ROBOTS_SUCCESS ';\r\nexport const  REQUEST_ROBOTS_FAILED =  ' REQUEST_ROBOTS_FAILED ';\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import { CHANGE_SEARCH_FIELD,\r\n         REQUEST_ROBOTS_PENDING,\r\n         REQUEST_ROBOTS_SUCCESS,\r\n         REQUEST_ROBOTS_FAILED,\r\n} from './constant.js'\r\n\r\nconst initialStateSearch = {\r\n    searchField: ''\r\n}\r\n\r\nconst initialStateRobots = {\r\n    isPending: false,\r\n    robots: [],\r\n    error: ''\r\n}\r\n\r\nexport const searchRobots = (state=initialStateSearch, action={}) => {\r\n    switch(action.type){\r\n        case CHANGE_SEARCH_FIELD:\r\n        return Object.assign({}, state, { searchField: action.payload });\r\n        default:\r\n        return state; \r\n    }\r\n}\r\n\r\nexport const requestRobots = (state=initialStateRobots, action={}) => {\r\n    switch(action.type) {\r\n        case REQUEST_ROBOTS_PENDING:\r\n        return Object.assign({}, state, {isPending: true})\r\n        case REQUEST_ROBOTS_SUCCESS:\r\n        return Object.assign({}, state, {robots: action.payload, isPending: false})\r\n        case REQUEST_ROBOTS_FAILED:\r\n        return Object.assign({}, state, {error: action.payload, isPending: false})\r\n       default:\r\n       return state;\r\n    }\r\n}","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { Provider } from 'react-redux';\nimport { createStore, applyMiddleware, combineReducers } from 'redux';\nimport { createLogger } from 'redux-logger';\nimport thunkMiddleware from 'redux-thunk'\nimport './index.css';\nimport Appp from './containers/Appp';\nimport * as serviceWorker from './serviceWorker';\nimport { searchRobots, requestRobots } from './reducers'; \nimport 'tachyons';\n\nconst logger = createLogger();\nconst rootReducer = combineReducers({ searchRobots, requestRobots })\nconst store =createStore(rootReducer, applyMiddleware(thunkMiddleware, logger))\nReactDOM.render(   <Provider store={store}>\n                   <Appp />\n                   </Provider>,\n                 document.getElementById('root'));\n\n                   \n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}